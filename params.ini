[runtime]
; The emcee sampler, which uses the Goodman & Weare algorithm
sampler = test ;emcee fisher test 

[test]
save_dir = test_output
graph = pipeline.dot

[fisher]
step_size = 0.02

[emcee]
; The emcee sampler uses the concept of walkers, a collection
; of live points.  Sampling is done along lines that connect
; pairs of walkers.  The number of walkers must be at least
; 2*nparam + 1, but in general more than that usually works
; better.
walkers = 64
; This many samples is overkill, just to make the plots
; look a lot nicer
samples = 500
; This is the interval at which convergence diagnostics
; are performed
nsteps = 100

[pymc]
nsteps = 500
samples = 30000
adaptive_mcmc = True
; covmat = covmat6.txt
; In adaptive MCMC the proposal covariance
; is gradually tuned whilst maintaining the overall
; chain convergence properties.  You could set:
; adaptive_mcmc = True
; and you would not need a covariance matrix.
; This converges faster than if you dont have a good
; covariance matrix but a little slower than if you have
; a good one.  It is a good choice for an initial run
; to get a good covmat.  In fact, that is how we made
; demos/covmat5.txt

[output]
filename = gwem.txt
format = text
verbosity= debug

[pipeline]
modules = consistency camb gwem
values = values.ini
extra_output =
likelihoods = gwem
quiet=T
debug=F
timing=F


; To use the maxlike sampler instead you can 
; set sampler=maxlike at the top
[maxlike]
; The values file we use in this example was
; created just like the one we made in demo4,
; by setting sampler = maxlike above, so that
; these settings were used:
output_ini = values.ini
; A covariance can only be output by some 
; optimization methods (those that find an approximation to it numerically)
output_covmat = new.cov
tolerance = 1e-6
; The BFGS method seems to find it a bit harder to actually locate
; the peak, but once it is there it provides you with covariance
; matrix estimate
;method = Nelder-Mead
;method = BFGS
; Any minimizer available in scipy can be specified here - they are:
; Nelder-Mead
; Powell
; CG
; BFGS
; Newton-CG
; L-BFGS-B
; TNC
; COBYLA
; SLSQP
; dogleg
; trust-ncg

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=background
feedback=0
zmin=0.0
zmax=0.2
nz=100

[gwem]
file = gw/gwem.py
data_dir = data
data_file = test_ignore_vp.txt

